//ES6
//let and const

let a=10;
console.log(a);//10

const pi =3.14;
console.log(pi);//3.14

//arrow functions
//expression bodies - without function and return keywords
let sum = (a,b)=>a+b;
console.log(sum(10,20));//30

//statement bodies -without mention function
// num.forEach(v => {
//     if (v % 2 === 0)
//         fives.push(v)
//  })

//  //lexcial this - is a keyword that represents object that defined the arrow function
//  this.number.forEach((v) => {
//     if (v % 5 === 0)
//         this.five.push(v)
// })


//scoping
//block scope variables
for (let i = 0; i < a.length; i++) {
    let x = a[i]

}
var i, x, y;//es5
for (i = 0; i < a.length; i++) {
    x = a[i];
}
//block scope functions
{
    function foo () { return 1 }
    foo() === 1
    {
        function foo () { return 2 }
        foo() === 2
    }
    foo() === 1//only block scope
}

//Extended parameter handling
//default parameter - default values for function parameters
function f (x, y = 7, z = 42) {
    return x + y + z
}
f(1) === 50

function f (x, y = 6, z = 3) {
    return x + y + z
}
console.log(`default parameter:`, f(1) === 10)

//spread operator
var para = [ "hello", 'all', 12 ]
var p = [ 1, 2, ...para ] // [ 1, 2, "hello", all, 12 ] in es5 concat is used

var str = "well"
var char = [ ...str ] // [ "w", "e", "l","l" ]in es5  split is used

//rest operator -remaining arguments into a single parameter
function f (x, y, ...a) {
    return (x + y) * a.length
}
console.log(f(1, 2, ...para) === 9)

//TEMPLATE LITERALS
//string interpolation - single/multi line strings
let age = 254   // before ES6
console.log('The building is ' + age + ' years old.')
//after es6
let b = `        hello all,
        good morning,
        Happy to see you all !!`//multiline
console.log(b);  
console.log(`the number is ${age}`);    

//DESTRUCTURING ASSIGNMENT
//array matching

let array =[1,2,3]
let [q,n,m] = array
console.log(q,n,m);

//object matching,shorthand
// var {oi,lo,mn} =  tenobject()

// //in es5
// var tmp = node();
// var op  = tmp.op;
// var lhs = tmp.lhs;
// var rhs = tmp.rhs;

// //object matching,deep matching

// var {oi:z, lo:{ij:x},mn :y} = obj()

// //in es5
// var tmp = nodes();
// var z = tmp.oi;
// var x = tmp.lo.ij;
// var y = tmp.mn;

//object and array matching,default values
var obj = { c:12}
var arr =[30]
var {c,l=10} = obj
var [x,y= 1]= arr

//in es5
var obj = { o: 1 };
var list = [ 1 ];
var o = obj.o;
var x = list[0];

//parameter context matching

// function f ([ name, value ]) {
//     console.log(name, value)
// }
// function g ({ name: n, value: v }) {
//     console.log(n, v)
// }
// function h ({ name, value }) {
//     console.log(name, value)
// }
// f([ "akil", 16 ])
// g({ name: "akil", value:  17 })
// h({ name: "ram", value: 12 })

//Fail-soft Destructuring - optionally with default values

var w= [12,30]
var [t=1,s=2,c=3,d=10] = w
t=== 12
s=== 30
c=== 3
d=== 10
console.log(t,s,c,d)

//MODULES
// //value export/import
// export var Pi=3.14;//lib/math.js
// import * as math from "lib/math"
// //default&wildcards - marking a value as default exported values
// export * from "lib/math"
// export var e=2.718;

//ITERATOR & FOR OF OPERATOR

var inn=[1,2,3,4]
for(line of inn){
    console.log(line);
}
